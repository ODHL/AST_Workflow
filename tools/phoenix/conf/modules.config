/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


///////////////////////////////////////
//
// workflow: phoenix
//
///////////////////////////////////////

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CORRUPTION_CHECK {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}" },
                mode: 'copy',
                pattern: "*{.synopsis,_summaryline.tsv}"
            ],
            [
                path: { "${params.outdir}/${meta.id}/file_integrity" },
                mode: 'copy',
                pattern: "*{_summary_fairy.txt}"
            ]
        ]
    }

    withName: ASSET_CHECK {
        publishDir = [enabled: false]
   }

    withName: GET_RAW_STATS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/raw_stats" },
                mode: 'copy',
                pattern: "*{_raw_read_counts.txt}"
            ],
            [
                path: { "${params.outdir}/${meta.id}" },
                mode: 'copy',
                pattern: "*{.synopsis,_summaryline.tsv}"
            ],
            [
                path: { "${params.outdir}/${meta.id}/file_integrity" },
                mode: 'copy',
                pattern: "*{_summary_rawstats.txt}"
            ]
        ]
    }

    withName: READ_COUNT_CHECK {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}" },
                mode: 'copy',
                pattern: "*.{synopsis,tsv}"
            ],
            [
                path: { "${params.outdir}/${meta.id}/file_integrity" },
                mode: 'copy',
                pattern: "*{_summary.txt}"
            ]  
        ]
    }

    withName: BBDUK {
        ext.args = 'hdist=1 k=31'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qc_stats" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: FASTQCTRIMD {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qc_stats" },
            mode: 'copy',
            pattern: "*.{html,zip}"
        ]
    }

    withName: FASTP_TRIMD {
        ext.args = '--cut_right --cut_right_window_size 20 --cut_right_mean_quality 30 --length_required 50 --trim_poly_g --cut_front 20 --cut_tail 20'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/fastp_trimd" },
            mode: 'copy',
            pattern: "*.{trim.fastq.gz,json,html}"
        ]
    }

    withName: FASTP_SINGLES {
        ext.args = '--disable_adapter_trimming'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/fastp_trimd" },
            mode: 'copy',
            pattern: "*.{singles.fastq.gz,json,html}"
        ]
    }

    withName: GET_TRIMD_STATS {
        publishDir = [
            [
            path: { "${params.outdir}/${meta.id}/qc_stats" },
            mode: 'copy',
            pattern: "*{_trimmed_read_counts.txt}"
            ],
            [
                path: { "${params.outdir}/${meta.id}" },
                mode: 'copy',
                pattern: "*{.synopsis,_summaryline.tsv}"
            ],
            [
                path: { "${params.outdir}/${meta.id}/file_integrity" },
                mode: 'copy',
                pattern: "*{_summary.txt}"
            ]
        ]
    }

    withName: SRST2_AR {
        ext.args = '--forward _1.trim --reverse _2.trim --save_scores --report_all_consensus > srst2.log'
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/srst2" },
            mode: 'copy',
            pattern: "*_fullgenes__ResGANNCBI_*_srst2__results.txt"
        ]
    }

    withName: GET_MLST_SRST2 {
        ext.args = ''
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*{_getMLST_out.txt}"
        ]
    }

    withName: SRST2_MLST {
        ext.args = '--forward _1.trim --reverse _2.trim --save_scores --report_all_consensus > srst2.log'
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*_srst2.mlst"
        ]
    }

    withName: CHECK_MLST {
        ext.args = ''
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*{_combined.tsv}"
        ]
    }

    withName: CHECK_MLST_WITH_SRST2 {
        ext.args = ''
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*{_combined.tsv}"
        ]
    }

    withName: RENAME_FASTA_HEADERS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/assembly" },
            mode: 'copy',
            pattern: "*.renamed.scaffolds.fa.gz"
        ]
    }

    withName: BBMAP_REFORMAT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/assembly" },
            mode: 'copy',
            pattern: "*.{scaffolds.fa.gz,log}"
        ]
    }

    withName: SCAFFOLD_COUNT_CHECK {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}" },
                mode: 'copy',
                pattern: "*{.synopsis,_summaryline.tsv}"
            ],
            [
                path: { "${params.outdir}/${meta.id}/file_integrity" },
                mode: 'copy',
                pattern: "*{_summary.txt}"
            ]
        ]
    }

    withName: PROKKA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation" },
            mode: 'copy',
            pattern: "*.{faa,gff,fna}"
        ]
    }

    withName: GET_TAXA_FOR_AMRFINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/AMRFinder" },
            mode: 'copy',
            pattern: "*_AMRFinder_Organism.csv"
        ]
    }

    withName: AMRFINDERPLUS_RUN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/AMRFinder" },
            mode: 'copy',
            pattern: "*.{tsv}"
        ]
    }

    withName: GAMMA_HV {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gamma_hv" },
            mode: 'copy',
            pattern: "*.{gamma,psl,gff,fasta}"
        ]
    }

    withName: GAMMA_AR {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gamma_ar" },
            mode: 'copy',
            pattern: "*.{gamma,psl,gff,fasta}"
        ]
    }

    withName: GAMMA_PF {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gamma_pf" },
            mode: 'copy',
            pattern: "*.{gamma,psl,gff,fasta}"
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/quast" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: MASH_DIST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/ANI/mash_dist" },
            mode: 'copy',
            pattern: "*.txt"
        ]
    }

    withName: DETERMINE_TOP_MASH_HITS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/ANI/mash_dist" },
            mode: 'copy',
            pattern: "*_best_MASH_hits.txt"
        ]
    }

    withName: FASTANI {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/ANI" },
            mode: 'copy',
            pattern: "*.ani.txt"
        ]
    }

    withName: FORMAT_ANI {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/ANI" },
            mode: 'copy',
            pattern: "*.fastANI.txt"
        ]
    }

    withName: DETERMINE_TAXA_ID {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.tax"
        ]
    }

    withName: MLST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: BUSCO {
        ext.args = '--mode genome'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/BUSCO" },
            mode: 'copy',
            pattern: "*.{txt,json,bam}"
        ]
    }

    withName: CALCULATE_ASSEMBLY_RATIO {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*{_Assembly_ratio_*.txt,_GC_content_*.txt}"
        ]
    }

    withName: CREATE_SUMMARY_LINE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*_summaryline.tsv"
        ]
    }

    withName: FETCH_FAILED_SUMMARIES {
        publishDir = [enabled: false]
    }

    withName: GATHER_SUMMARY_LINES {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "Phoenix_Summary.tsv"
        ]
    }

    withName: GRIPHIN {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "{*_Summary.xlsx,*_Summary.tsv,Directory_samplesheet.csv}"
        ]
    }

    withName: CREATE_NCBI_UPLOAD_SHEET {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "*{*.xlsx}"
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
    
    withName: CFSAN {
        publishDir = [
            path: { "${params.outdir}/CFSAN" },
            mode: 'copy',
            pattern: "*{*snp_distance_matrix.tsv}"
        ]
    }

    withName: ROARY {
        ext.args = '-n'
        publishDir = [
            path: { "${params.outdir}/ROARY" },
            mode: 'copy',
            pattern: "*{*.aln,core_genome_statistics.txt,*presence_absence*}"            
        ]
    }

    withName: TREE {
        ext.args = 'GTR+G'
        publishDir = [
            path: { "${params.outdir}/TREE" },
            mode: 'copy',
            pattern: "*{*core_genome.tree}"
        ]
    }
}

///////////////////////////////////////
//
// Subworkflow: spades
//
///////////////////////////////////////

process {

    withName: SPADES {
        errorStrategy = "ignore"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/assembly" },
            mode: 'copy',
            pattern: "*.{scaffolds.fa.gz,contigs.fa.gz,transcripts.fa.gz,gene_clusters.fa.gz,assembly.gfa.gz,log}"
        ]
    }

    withName: DETERMINE_TAXA_ID_FAILURE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.tax"
        ]
    }

    withName: CREATE_SUMMARY_LINE_FAILURE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*_summaryline.tsv"
        ]
    }

    withName: GENERATE_PIPELINE_STATS_FAILURE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

    withName: GENERATE_PIPELINE_STATS_FAILURE_EXQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

}

///////////////////////////////////////
//
// Subworkflow: kraken to krona
//
///////////////////////////////////////

process {

    withName: KRAKEN2_TRIMD {
        ext.args = '--use-names'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd" },
            mode: 'copy',
            pattern: "*{classifiedreads.txt,.summary.txt}"
            // Testing removal of (un)classified(reads)*
            //pattern: "*{classified*,unclassified*,classifiedreads*,.summary.txt}"
        ]
    }

    withName: KRAKEN2_BH_TRIMD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd" },
            mode: 'copy',
            pattern: "*.top_kraken_hit.txt"
        ]
    }

    withName: KREPORT2MPA_TRIMD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd" },
            mode: 'copy',
            pattern: "*.mpa"
        ]
    }

    withName: KREPORT2KRONA_TRIMD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd/krona" },
            mode: 'copy',
            pattern: "*.krona"
        ]
    }

    withName: KRONA_KTIMPORTTEXT_TRIMD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd/krona" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }
        withName: KRAKEN2_ASMBLD {
        ext.args = '--use-names'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld" },
            mode: 'copy',
            pattern: "*{classifiedreads.txt,.summary.txt}"
            // Testing removal of (un)classified(reads)*
            //pattern: "*{classified*,unclassified*,classifiedreads*,.summary.txt}"
        ]
    }

    withName: KREPORT2MPA_ASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld" },
            mode: 'copy',
            pattern: "*.mpa"
        ]
    }

    withName: KREPORT2KRONA_ASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld/krona" },
            mode: 'copy',
            pattern: "*.krona"
        ]
    }

    withName: KRONA_KTIMPORTTEXT_ASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld/krona" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    withName: KRAKEN2_BH_ASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld" },
            mode: 'copy',
            pattern: "*.top_kraken_hit.txt"
        ]
    }

    withName: KRAKEN2_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted" },
            mode: 'copy',
            pattern: "*.classifiedreads.txt"
        ]
    }

    withName: KRAKENTOOLS_MAKEKREPORT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted" },
            mode: 'copy',
            pattern: "*_wtasmbld.summary.txt"
        ]
    }

    withName: KREPORT2KRONA_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted/krona" },
            mode: 'copy',
            pattern: "*.krona"
        ]
    }

    withName: KRONA_KTIMPORTTEXT_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted/krona" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    withName: KRONA_KTIMPORTTEXT_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted/krona" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    withName: KRAKEN2_BH_WTASMBLD {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_asmbld_weighted" },
            mode: 'copy',
            pattern: "*.top_kraken_hit.txt"
        ]
    }
}


///////////////////////////////////////
//
// Subworkflow: generating pipeline stats
//
///////////////////////////////////////


process {

    withName: GENERATE_PIPELINE_STATS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

    withName: GENERATE_PIPELINE_STATS_EXQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

}


///////////////////////////////////////
//
// workflow: scaffolds and cdc_scaffolds
//
///////////////////////////////////////

process {

    withName: SCAFFOLDS_SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: "*.valid.csv"
        ]
    }

    withName: CREATE_SAMPLESHEET {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: "GRiPHin_samplesheet_created.csv"
        ]
    }

}

///////////////////////////////////////
//
// workflow: sra
//
///////////////////////////////////////


process {

    withName: SRATOOLS_PREFETCH {
        publishDir = [enabled: false]
    }

    withName: SRATOOLS_FASTERQDUMP {
        publishDir = [enabled: false]
    }

    withName: ENTREZDIRECT_ESEARCH {
        publishDir = [enabled: false]
    }

    withName: RENAME_SRA_FASTA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/raw_fastqs" },
            mode: 'copy',
            pattern: '*_R*_001.fastq.gz'
        ]
    }

    withName: CREATE_SRA_SAMPLESHEET {
        publishDir = [ path: { "${params.outdir}" },
            mode: 'copy',
            pattern: 'sra_samplesheet.csv'
        ]
    }

}
