/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


///////////////////////////////////////
//
// workflow: phoenix
//
///////////////////////////////////////

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FAIRY {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/raw_stats" },
            mode: 'copy',
            pattern: '*.txt'
        ]
    } 

    withName: ASSET_CHECK {
        publishDir = [enabled: false]
   }

    withName: BBDUK {
        ext.args = 'hdist=1 k=31'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qc_stats" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: FASTQCTRIMD {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qc_stats" },
            mode: 'copy',
            pattern: "*.{html,zip}"
        ]
    }

    withName: GET_RAW_STATS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/raw_stats" },
            mode: 'copy',
            pattern: "*{_raw_read_counts.txt}"
        ]
    }

    withName: FASTP_TRIMD {
        ext.args = '--cut_right --cut_right_window_size 20 --cut_right_mean_quality 30 --length_required 50 --trim_poly_g --cut_front 20 --cut_tail 20'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/fastp_trimd" },
            mode: 'copy',
            pattern: "*.{trim.fastq.gz}"
        ]
    }

    withName: FASTP_SINGLES {
        ext.args = '--disable_adapter_trimming'
    }

    withName: GET_TRIMD_STATS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qc_stats" },
            mode: 'copy',
            pattern: "*{_trimmed_read_counts.txt}"
        ]
    }

    withName: KRAKEN2_TRIMD {
        ext.args = '--use-names'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd" },
            mode: 'copy',
            pattern: "*{.summary.txt}"
        ]
    }

    withName: KRAKENTOOLS_MAKEKREPORT {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/kraken2_trimd" },
            mode: 'copy',
            pattern: "*_wtasmbld.summary.txt"
        ]
    }

    withName: SRST2_AR {
        ext.args = '--forward _1.trim --reverse _2.trim --save_scores --report_all_consensus > srst2.log'
        ext.errorStrategy = { "ignore" }
    }

    withName: GET_MLST_SRST2 {
        ext.args = ''
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*{_getMLST_out.txt}"
        ]
    }

    withName: SRST2_MLST {
        ext.args = '--forward _1.trim --reverse _2.trim --save_scores --report_all_consensus > srst2.log'
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*_srst2.mlst"
        ]
    }

    withName: CHECK_MLST {
        ext.args = ''
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*{_combined.tsv}"
        ]
    }

    withName: CHECK_MLST_WITH_SRST2 {
        ext.args = ''
        ext.errorStrategy = { "ignore" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*{_combined.tsv}"
        ]
    }

    withName: PROKKA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation" },
            mode: 'copy',
            pattern: "*.{faa,gff,fna}"
        ]
    }

    withName: GET_TAXA_FOR_AMRFINDER {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/AMRFinder" },
            mode: 'copy',
            pattern: "*_AMRFinder_Organism.csv"
        ]
    }

    withName: AMRFINDERPLUS_RUN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/amr" },
            mode: 'copy',
            pattern: "*.{tsv}"
        ]
    }

    withName: GAMMA_AR {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gamma_ar" },
            mode: 'copy',
            pattern: "*.{gamma,psl,gff,fasta}"
        ]
    }

    withName: MLST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }

    withName: GATHER_SUMMARY_LINES {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            pattern: "Phoenix_Summary.tsv"
        ]
    }

    withName: CFSAN {
        publishDir = [
            path: { "${params.outdir}/CFSAN" },
            mode: 'copy',
            pattern: "*{*snp_distance_matrix.tsv}"
        ]
    }

    withName: ROARY {
        ext.args = '-n'
        publishDir = [
            path: { "${params.outdir}/ROARY" },
            mode: 'copy',
            pattern: "*{*.aln,core_genome_statistics.txt,*presence_absence*}"            
        ]
    }

    withName: TREE {
        ext.args = 'GTR+G'
        publishDir = [
            path: { "${params.outdir}/TREE" },
            mode: 'copy',
            pattern: "*{*core_genome.tree}"
        ]
    }
}



///////////////////////////////////////
//
// Subworkflow: generating pipeline stats
//
///////////////////////////////////////


process {

    withName: GENERATE_PIPELINE_STATS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

    withName: GENERATE_PIPELINE_STATS_EXQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: 'copy',
            pattern: "*.synopsis"
        ]
    }

}


///////////////////////////////////////
//
// workflow: scaffolds and cdc_scaffolds
//
///////////////////////////////////////

process {

    withName: SCAFFOLDS_SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: "*.valid.csv"
        ]
    }

    withName: CREATE_SAMPLESHEET {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: "GRiPHin_samplesheet_created.csv"
        ]
    }

}

///////////////////////////////////////
//
// workflow: sra
//
///////////////////////////////////////


process {

    withName: SRATOOLS_PREFETCH {
        publishDir = [enabled: false]
    }

    withName: SRATOOLS_FASTERQDUMP {
        publishDir = [enabled: false]
    }

    withName: ENTREZDIRECT_ESEARCH {
        publishDir = [enabled: false]
    }

    withName: RENAME_SRA_FASTA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/raw_fastqs" },
            mode: 'copy',
            pattern: '*_R*_001.fastq.gz'
        ]
    }

    withName: CREATE_SRA_SAMPLESHEET {
        publishDir = [ path: { "${params.outdir}" },
            mode: 'copy',
            pattern: 'sra_samplesheet.csv'
        ]
    }

}
